name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main
    paths:
      - 'web/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Pages

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Build
        env:
          VITE_BUILD_SHA: ${{ github.sha }}
        run: |
          cd web
          npm run build

      - name: List Cloudflare Pages projects
        id: list-projects
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: pages project list

      - name: Create Cloudflare Pages project
        if: ${{ !contains(steps.list-projects.outputs.command-output, 'exception-notify-workspace') }}
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: pages project create exception-notify-workspace --production-branch=main

      - name: List Cloudflare KV namespaces
        id: list-kv
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: kv namespace list

      - name: Create Cloudflare KV namespace
        if: ${{ !contains(steps.list-kv.outputs.command-output, 'exception-notify-workspace') }}
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: kv namespace create "exception-notify-workspace"

      - name: Extract KV namespace ID
        id: extract-kv-id
        run: |
          echo "🔍 Extracting KV ID for 'exception-notify-workspace'..."
          KV_ID=$(echo "${{ steps.list-kv.outputs.command-output }}" | grep "exception-notify-workspace" | awk '{print $NF}')
          if [ -z "$KV_ID" ]; then
            echo "❌ Failed to extract KV_NAMESPACE_ID!"
            exit 1
          fi
          echo "✅ Found KV_NAMESPACE_ID=$KV_ID"
          echo "KV_NAMESPACE_ID=$KV_ID" >> $GITHUB_ENV

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          preCommands: |
            echo "🚀 Starting deployment..."
            echo "Using KV ID: $KV_NAMESPACE_ID"
            envsubst < wrangler.template.toml > web/wrangler.toml
            echo "✅ wrangler.toml generated:"
            cat wrangler.toml
          command: |
            pages functions build web/functions
            pages deploy web/dist --project-name=exception-notify-workspace
          postCommands: |
            echo "🎉 Deployment finished!"
            wrangler whoami
