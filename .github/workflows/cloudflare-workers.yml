name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
    paths:
      - 'web/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Workers
    defaults:
      run:
        working-directory: ./web

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build
        env:
          NEXT_PUBLIC_BUILD_SHA: ${{ github.sha }}
        run: npm run build:opennextjs

      # Step 1Ô∏è‚É£ - List KV namespaces
      - name: List Cloudflare KV namespaces
        id: list-kv
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: kv namespace list

      # Step 2Ô∏è‚É£ - Create KV if missing
      - name: Create Cloudflare KV namespace if missing
        if: ${{ !contains(steps.list-kv.outputs.command-output, 'worker-exception-notify-workspace') }}
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: kv namespace create "worker-exception-notify-workspace"

      # Step 3Ô∏è‚É£ - Re-list KV after possible creation
      - name: Refresh Cloudflare KV namespace list
        id: list-kv-again
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: kv namespace list

      # Step 4Ô∏è‚É£ - List D1 databases
      - name: List Cloudflare D1 databases
        id: list-d1
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: d1 list --json

      # Step 5Ô∏è‚É£ - Create D1 if missing
      - name: Create Cloudflare D1 database if missing
        if: ${{ !contains(steps.list-d1.outputs.command-output, 'exception-notify-db') }}
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: d1 create exception-notify-db

      # Step 6Ô∏è‚É£ - Re-list D1 after possible creation
      - name: Refresh Cloudflare D1 database list
        id: list-d1-again
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: d1 list --json

      # Step 7Ô∏è‚É£ - Extract KV & D1 IDs and Generate wrangler.toml
      - name: Extract KV & D1 IDs and Generate wrangler.toml
        env:
          GIT_COMMIT_SHA: ${{ github.sha }}
        run: |
          echo "üîç Extracting KV ID for 'worker-exception-notify-workspace'..."
          KV_ID=$(echo '${{ steps.list-kv-again.outputs.command-output }}' | jq -r '.[] | select(.title=="worker-exception-notify-workspace") | .id')

          if [ -z "$KV_ID" ] || [ "$KV_ID" = "null" ]; then
            echo "‚ùå Failed to extract KV_NAMESPACE_ID!"
            echo "Raw JSON output below:"
            echo '${{ steps.list-kv-again.outputs.command-output }}'
            exit 1
          fi

          echo "‚úÖ Found KV_NAMESPACE_ID=$KV_ID"
          echo "KV_NAMESPACE_ID=$KV_ID" >> $GITHUB_ENV

          echo "üîç Extracting D1 ID for 'exception-notify-db'..."
          D1_ID=$(echo '${{ steps.list-d1-again.outputs.command-output }}' | jq -r '.[] | select(.name=="exception-notify-db") | (.uuid // .id // .database_id)')

          if [ -z "$D1_ID" ] || [ "$D1_ID" = "null" ]; then
            echo "‚ùå Failed to extract D1_DATABASE_ID!"
            echo "Raw JSON output below:"
            echo '${{ steps.list-d1-again.outputs.command-output }}'
            exit 1
          fi

          echo "‚úÖ Found D1_DATABASE_ID=$D1_ID"
          echo "D1_DATABASE_ID=$D1_ID" >> $GITHUB_ENV
          echo "D1_DATABASE_NAME=exception-notify-db" >> $GITHUB_ENV

          echo "üöÄ Generating wrangler.toml..."
          export KV_NAMESPACE_ID=$KV_ID
          export D1_DATABASE_ID=$D1_ID
          export D1_DATABASE_NAME=exception-notify-db
          envsubst < wrangler.template.toml > wrangler.toml
          echo "‚úÖ Generated wrangler.toml:"
          cat wrangler.toml

      # Step 8Ô∏è‚É£ - Deploy to Cloudflare Workers
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          workingDirectory: "web"
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          preCommands: |
            pwd
            ls -la
          command: deploy --name=exception-notify-worker
          postCommands: |
            echo "üéâ Deployment finished!"
            wrangler whoami
